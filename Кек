Подробный разбор кода Flutter Cookie Clicker
1. Импорт библиотек
дротик
import 'package:flutter/material.dart';
Объяснение:
Импортируется основной пакет Flutter для создания приложений в стиле Material Design.

2. Глобальные константы
дротик
const String backgroundImageUrl = 'https://steamuserimages-a.akamaihd.net/ugc/2110558388124607901/653D9DC42309A3BB3AF2A264E6B00BCB36648440/?imw=512&amp;imh=288&amp;ima=fit&amp;impolicy=Letterbox&amp;imcolor=%23000000&amp;letterbox=true';
Объяснение:
Создается глобальная строковая константа с URL-адресом фонового изображения, используемого на всех экранах.

3. Точка входа в приложение
дротик
void main() {
  runApp(CookieClickerApp());
}
Объяснение:
main() — точка входа. Запускает приложение, передавая главный виджет CookieClickerApp().

4. Главный виджет приложения
дротик
class CookieClickerApp extends StatefulWidget {
  @override
  _CookieClickerAppState createState() => _CookieClickerAppState();
}
Объяснение:
Создается виджет с отслеживанием состояния, который может изменять свое состояние (например, количество печенек и текущий экран).

Состояние главного виджета
дротик
class _CookieClickerAppState extends State<CookieClickerApp> {
  int cookies = 0;
  bool onGameScreen = false;

  void incrementCookies() {
    setState(() {
      cookies++;
    });
  }

  void goToGameScreen() {
    setState(() {
      onGameScreen = true;
    });
  }

  void goToStartScreen() {
    setState(() {
      onGameScreen = false;
    });
  }
Объяснение:

cookies — текущее количество печенек.

onGameScreen — флаг, показывающий, на каком экране находится пользователь.

Методы incrementCookies, goToGameScreen, goToStartScreen изменяют состояние и вызывают перерисовку виджета.

Построение интерфейса
дротик
@override
Widget build(BuildContext context) {
  return MaterialApp(
    debugShowCheckedModeBanner: false,
    home: onGameScreen
        ? CookieClickerScreen(
            cookies: cookies,
            onIncrement: incrementCookies,
            onBack: goToStartScreen,
          )
        : StartScreen(
            onStart: goToGameScreen,
          ),
  );
}
Colors.white,
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => SettingsScreen()),
                );
              },
              child: Text('Settings'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Color(0xFFD2691E),
                foregroundColor: Colors.white,
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).maybePop();
              },
              child: Text('Exit'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Color(0xFFD2691E),
                foregroundColor: Colors.white,
              ),
            ),
          ],
        ),
      ),
    ),
  );
}


Объяснение:

Scaffold — каркас экрана.

Фон задается с помощью Container с DecorationImage.

Три кнопки: «Пуск», «Настройки», «Выход».

Кнопка «Пуск» вызывает onStart, «Настройки» открывает настройки, «Выход» закрывает экран.

6. Экран настроек
дротик
class SettingsScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.transparent,
      appBar: AppBar(
        title: Text('Settings'),
        centerTitle: true,
        backgroundColor: Colors.orangeAccent,
      ),
      body: Container(
        decoration: BoxDecoration(
          image: DecorationImage(
            image: NetworkImage(backgroundImageUrl),
            fit: BoxFit.cover,
          ),
        ),
        child: Center(
          child: Text(
            'Settings - In Development',
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
        ),
      ),
    );
  }
}
Объяснение:

Экран с заголовком и фоном.

В центре надпись «Настройки — в разработке».

7. Экран игры (Cookie Clicker)
дротик
class CookieClickerScreen extends StatefulWidget {
  final int cookies;
  final VoidCallback onBack;
  final VoidCallback onIncrement;

  CookieClickerScreen({
    required this.cookies,
    required this.onBack,
    required this.onIncrement,
  });

  @override
  _CookieClickerScreenState createState() => _CookieClickerScreenState();
}
Объяснение:

Экран игры — это виджет с отслеживанием состояния.

Получает количество печенек, функцию возврата и функцию увеличения


${widget.cookies}',
                        style: TextStyle(fontSize: 24.0, color: Colors.white),
                      ),
                      SizedBox(height: 20),
                      GestureDetector(
                        onTap: widget.onIncrement,
                        child: Image.network(
                          'https://bruce-moe.github.io/Cookieclicker/resources/Cookie.png',
                          width: 150,
                          height: 150,
                          fit: BoxFit.contain,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
Объяснение:

AppBar с кнопкой возврата.

В центре отображается количество печенек и изображение печенки.

При нажатии на печеньку активируется функция увеличения.

8. Extension для Offset
дротик
extension NormalizeOffset on Offset {
  Offset normalize() {
    final length = distance;
    if (length == 0) return this;
    return this / length;
  }
}
Объяснение:

Расширение для класса Offset (координаты).

Добавляет метод normalize(), который возвращает нормализованный вектор (длина = 1).

В данном проекте, возможно, заложены перспективы на будущее.

Итог
Приложение состоит из трех основных экранов: стартовый, игровой и экран настроек.

Используется глобальный фон, пользовательские кнопки и простая логика переходов между экранами.

Весь код хорошо структурирован и легко расширяется.
