import 'dart:math' show Random, pi;
import 'package:flutter/material.dart';

// Вставьте сюда ссылку на ваше фоновое изображение
const String backgroundImageUrl = 'https://i.imgur.com/V8KJquAg.jpg';

void main() {
  runApp(CookieClickerApp());
}

class CookieClickerApp extends StatefulWidget {
  @override
  _CookieClickerAppState createState() => _CookieClickerAppState();
}

class _CookieClickerAppState extends State<CookieClickerApp> {
  int cookies = 0;
  bool onGameScreen = false;

  void incrementCookies() {
    setState(() {
      cookies++;
    });
  }

  void goToGameScreen() {
    setState(() {
      onGameScreen = true;
    });
  }

  void goToStartScreen() {
    setState(() {
      onGameScreen = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: onGameScreen
          ? CookieClickerScreen(
              cookies: cookies,
              onIncrement: incrementCookies,
              onBack: goToStartScreen,
            )
          : StartScreen(
              onStart: goToGameScreen,
            ),
    );
  }
}

class StartScreen extends StatelessWidget {
  final VoidCallback onStart;

  StartScreen({required this.onStart});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Делаем фон прозрачным, чтобы видеть фон из Container
      backgroundColor: Colors.transparent,
      appBar: AppBar(
        toolbarHeight: 60,
        elevation: 0,
        backgroundColor: Colors.transparent,
        flexibleSpace: Container(
          decoration: BoxDecoration(
            color: Colors.orangeAccent,
            borderRadius: BorderRadius.circular(12),
          ),
          alignment: Alignment.center,
          child: Text(
            'Cookie Clicker',
            style: TextStyle(
              color: Colors.white,
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
      ),
      extendBodyBehindAppBar: true,
      // Оборачиваем Scaffold в Container с фоном
      body: Container(
        decoration: BoxDecoration(
          image: DecorationImage(
            image: NetworkImage(backgroundImageUrl),
            fit: BoxFit.cover,
          ),
        ),
        child: Center(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              ElevatedButton(
                onPressed: onStart,
                child: Text('Start'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Color(0xFFD2691E),
                  foregroundColor: Colors.white,
                ),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => SettingsScreen()),
                  );
                },
                child: Text('Settings'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Color(0xFFD2691E),
                  foregroundColor: Colors.white,
                ),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  Navigator.of(context).maybePop();
                },
                child: Text('Exit'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Color(0xFFD2691E),
                  foregroundColor: Colors.white,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class SettingsScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.transparent,
      appBar: AppBar(
        title: Text('Settings'),
        centerTitle: true,
        backgroundColor: Colors.orangeAccent,
      ),
      body: Container(
        decoration: BoxDecoration(
          image: DecorationImage(
            image: NetworkImage(backgroundImageUrl),
            fit: BoxFit.cover,
          ),
        ),
        child: Center(
          child: Text(
            'Settings - In Development',
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
        ),
      ),
    );
  }
}

class FlyingCookie extends StatefulWidget {
  final Offset startPosition;
  final double size;
  final double angle;
  final Offset direction;

  FlyingCookie({
    required this.startPosition,
    required this.size,
    required this.angle,
    required this.direction,
    Key? key,
  }) : super(key: key);

  @override
  _FlyingCookieState createState() => _FlyingCookieState();
}

class _FlyingCookieState extends State<FlyingCookie> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;
  late double rotationAngle;

  @override
  void initState() {
    super.initState();
    rotationAngle = widget.angle;

    _controller = AnimationController(
      vsync: this,
      duration: Duration(seconds: 1),
    );

    _animation = Tween<double>(begin: 0, end: 1).animate(
      CurvedAnimation(parent: _controller, curve: Curves.easeOut),
    );

    _controller.addListener(() {
      setState(() {
        rotationAngle += 0.1;
      });
    });

    _controller.forward();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final offset = widget.startPosition + widget.direction * 100 * _animation.value;
    final opacity = 1.0 - _animation.value;

    return Positioned(
      left: offset.dx,
      top: offset.dy,
      child: Opacity(
        opacity: opacity.clamp(0.0, 1.0),
        child: Transform.rotate(
          angle: rotationAngle,
          child: Image.network(
            'https://bruce-moe.github.io/Cookieclicker/resources/Cookie.png',
            width: widget.size,
            height: widget.size,
          ),
        ),
      ),
    );
  }
}

class CookieClickerScreen extends StatefulWidget {
  final int cookies;
  final VoidCallback onBack;
  final VoidCallback onIncrement;

  CookieClickerScreen({
    required this.cookies,
    required this.onBack,
    required this.onIncrement,
  });

  @override
  _CookieClickerScreenState createState() => _CookieClickerScreenState();
}

class _CookieClickerScreenState extends State<CookieClickerScreen> {
  final List<FlyingCookie> flyingCookies = [];
  final Random random = Random();

  final GlobalKey _cookieKey = GlobalKey();

  void _onCookieTap(TapDownDetails details) {
    setState(() {
      widget.onIncrement();

      final RenderBox? renderBox = _cookieKey.currentContext?.findRenderObject() as RenderBox?;
      if (renderBox == null) return;

      final position = renderBox.localToGlobal(Offset.zero);
      final size = renderBox.size;
      final center = position + Offset(size.width / 2, size.height / 2);

      final stackBox = context.findRenderObject() as RenderBox;
      final localCenter = stackBox.globalToLocal(center);

      for (int i = 0; i < 2; i++) {
        final partSize = 20 + random.nextDouble() * 20;
        final angle = random.nextDouble() * 2 * pi;
        final direction = Offset(
          (random.nextDouble() - 0.5) * 2,
          -random.nextDouble() - 0.5,
        ).normalize();

        flyingCookies.add(FlyingCookie(
          startPosition: localCenter - Offset(partSize / 2, partSize / 2),
          size: partSize,
          angle: angle,
          direction: direction,
          key: UniqueKey(),
        ));
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.transparent,
      appBar: AppBar(
        toolbarHeight: 60,
        elevation: 0,
        backgroundColor: Colors.transparent,
        flexibleSpace: Container(
          decoration: BoxDecoration(
            color: Colors.orangeAccent,
            borderRadius: BorderRadius.circular(12),
          ),
          alignment: Alignment.center,
          child: Text(
            'Cookie Clicker',
            style: TextStyle(
              color: Colors.white,
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        leading: IconButton(
          icon: Icon(Icons.arrow_back),
          onPressed: widget.onBack,
        ),
      ),
      extendBodyBehindAppBar: true,
      body: Container(
        decoration: BoxDecoration(
          image: DecorationImage(
            image: NetworkImage(backgroundImageUrl),
            fit: BoxFit.cover,
          ),
        ),
        child: ConstrainedBox(
          constraints: BoxConstraints.expand(),
          child: Stack(
            children: [
              Container(
                color: Colors.transparent, // чтобы фон был виден
                child: Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        'Cookies: ${widget.cookies}',
                        style: TextStyle(fontSize: 24.0, color: Colors.white),
                      ),
                      SizedBox(height: 20),
                      GestureDetector(
                        key: _cookieKey,
                        onTapDown: _onCookieTap,
                        child: Image.network(
                          'https://bruce-moe.github.io/Cookieclicker/resources/Cookie.png',
                          width: 150,
                          height: 150,
                          fit: BoxFit.contain,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              ...flyingCookies,
            ],
          ),
        ),
      ),
    );
  }
}

extension NormalizeOffset on Offset {
  Offset normalize() {
    final length = distance;
    if (length == 0) return this;
    return this / length;
  }
}
